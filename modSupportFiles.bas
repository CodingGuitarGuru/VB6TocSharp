Attribute VB_Name = "modSupportFiles"
Option Explicit

Public Function CreateProjectSupportFiles() As Boolean
  Dim S As String, F As String
  S = ApplicationXAML()
  F = "application.xaml"
  WriteOut F, S, ""
  
  S = VBExtensionClass()
  F = "VBExtension.cs"
  WriteOut F, S, ""
  
  S = VBAConstantsClass()
  F = "VBConstants.cs"
  WriteOut F, S, ""
End Function

Public Function ApplicationXAML() As String
  Dim R As String, M As String, N As String
  R = "": M = "": N = vbCrLf
  
  R = R & M & "<Application x:Class=""Application"" "
  R = R & N & "xmlns = ""http://schemas.microsoft.com/winfx/2006/xaml/presentation"" "
  R = R & N & "xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml"" "
  R = R & N & "xmlns:local=""clr-namespace:WpfApp1"" "
  R = R & N & "StartupUri=""MainWindow.xaml""> "
  R = R & N & "  <Application.Resources>"
  R = R & N & "  </Application.Resources>"
  R = R & N & "</Application>"

  ApplicationXAML = R
End Function



Public Function CreateProjectFile(ByVal vbpFile As String)
  Dim S As String, M As String, N As String
  Dim L
  S = ""
  M = ""
  N = vbCrLf
  

  S = S & M & "<?xml version=""1.0"" encoding=""utf-8""?>"
  S = S & N & "<Project ToolsVersion=""15.0"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">"
  S = S & N & "  <Import Project=""$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props"" Condition=""Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')"" />"
  S = S & N & "  <PropertyGroup>"
  S = S & N & "    <Configuration Condition="" '$(Configuration)' == '' "">Debug</Configuration>"
  S = S & N & "    <Platform Condition="" '$(Platform)' == '' "">AnyCPU</Platform>"
  S = S & N & "    <ProjectGuid>{92F75129-0EC1-47BA-85A7-E47F9EB140FD}</ProjectGuid>"
  S = S & N & "    <OutputType>WinExe</OutputType>"
  S = S & N & "    <RootNamespace>" & AssemblyName & "</RootNamespace>"
  S = S & N & "    <AssemblyName>" & AssemblyName & "</AssemblyName>"
  S = S & N & "    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>"
  S = S & N & "    <FileAlignment>512</FileAlignment>"
  S = S & N & "    <ProjectTypeGuids>{60dc8134-eba5-43b8-bcc9-bb4bc16c2548};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>"
  S = S & N & "    <WarningLevel>4</WarningLevel>"
  S = S & N & "    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>"
  S = S & N & "    <Deterministic>true</Deterministic>"
  S = S & N & "  </PropertyGroup>"
  S = S & N & "  <PropertyGroup Condition="" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "">"
  S = S & N & "    <PlatformTarget>AnyCPU</PlatformTarget>"
  S = S & N & "    <DebugSymbols>true</DebugSymbols>"
  S = S & N & "    <DebugType>full</DebugType>"
  S = S & N & "    <Optimize>false</Optimize>"
  S = S & N & "    <OutputPath>bin\Debug\</OutputPath>"
  S = S & N & "    <DefineConstants>DEBUG;TRACE</DefineConstants>"
  S = S & N & "    <ErrorReport>prompt</ErrorReport>"
  S = S & N & "    <WarningLevel>4</WarningLevel>"
  S = S & N & "  </PropertyGroup>"
  S = S & N & "  <PropertyGroup Condition="" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "">"
  S = S & N & "    <PlatformTarget>AnyCPU</PlatformTarget>"
  S = S & N & "    <DebugType>pdbonly</DebugType>"
  S = S & N & "    <Optimize>true</Optimize>"
  S = S & N & "    <OutputPath>bin\Release\</OutputPath>"
  S = S & N & "    <DefineConstants>TRACE</DefineConstants>"
  S = S & N & "    <ErrorReport>prompt</ErrorReport>"
  S = S & N & "    <WarningLevel>4</WarningLevel>"
  S = S & N & "  </PropertyGroup>"
  S = S & N & "  <ItemGroup>"
  S = S & N & "    <Reference Include=""Microsoft.VisualBasic"" />"
  S = S & N & "    <Reference Include=""Microsoft.VisualBasic.Compatibility"" />"
  S = S & N & "    <Reference Include=""Microsoft.VisualBasic.Compatibility.Data"" />"
  S = S & N & "    <Reference Include=""Microsoft.VisualBasic.PowerPacks, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL"" />"
  S = S & N & "    <Reference Include=""Microsoft.VisualBasic.PowerPacks.Vs, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL"" />"
  S = S & N & "    <Reference Include=""System"" />"
  S = S & N & "    <Reference Include=""System.Data"" />"
  S = S & N & "    <Reference Include=""System.Xml"" />"
  S = S & N & "    <Reference Include=""Microsoft.CSharp"" />"
  S = S & N & "    <Reference Include=""System.Core"" />"
  S = S & N & "    <Reference Include=""System.Xml.Linq"" />"
  S = S & N & "    <Reference Include=""System.Data.DataSetExtensions"" />"
  S = S & N & "    <Reference Include=""System.Net.Http"" />"
  S = S & N & "    <Reference Include=""System.Xaml"">"
  S = S & N & "      <RequiredTargetFramework>4.0</RequiredTargetFramework>"
  S = S & N & "    </Reference>"
  S = S & N & "    <Reference Include=""WindowsBase"" />"
  S = S & N & "    <Reference Include=""PresentationCore"" />"
  S = S & N & "    <Reference Include=""PresentationFramework"" />"
  S = S & N & "  </ItemGroup>"
  S = S & N & "  <ItemGroup>"
  S = S & N & "    <ApplicationDefinition Include=""App.xaml"">"
  S = S & N & "      <Generator>MSBuild:Compile</Generator>"
  S = S & N & "      <SubType>Designer</SubType>"
  S = S & N & "    </ApplicationDefinition>"
  S = S & N & "    <Compile Include=""App.xaml.cs"">"
  S = S & N & "      <DependentUpon>App.xaml</DependentUpon>"
  S = S & N & "      <SubType>Code</SubType>"
  S = S & N & "    </Compile>"
  
  For Each L In Split(VBPForms(vbpFile), vbCrLf)
  S = S & N & "    <Page Include=""" & OutputSubFolder(L) & ChgExt(L, ".xaml") & """>"
  S = S & N & "      <SubType>Designer</SubType>"
  S = S & N & "      <Generator>MSBuild:Compile</Generator>"
  S = S & N & "    </Page>"
  S = S & N & "    <Compile Include=""" & OutputSubFolder(L) & ChgExt(L, ".xaml.cs") & """>"
  S = S & N & "      <DependentUpon>" & ChgExt(L, ".xaml") & "</DependentUpon>"
  S = S & N & "      <SubType>Code</SubType>"
  S = S & N & "    </Compile>"
  Next

  
  S = S & N & "    <Compile Include=""VBExtension.cs"" />"
  S = S & N & "    <Compile Include=""VBConstants.cs"" />"
  For Each L In Split(VBPClasses(vbpFile) & vbCrLf & VBPModules(vbpFile), vbCrLf)
  S = S & N & "    <Compile Include=""" & OutputSubFolder(L) & ChgExt(L, ".cs") & """ />"
  Next
  
  S = S & N & "  </ItemGroup>"
  S = S & N & "  <ItemGroup>"
  S = S & N & "    <Compile Include=""Properties\AssemblyInfo.cs"">"
  S = S & N & "      <SubType>Code</SubType>"
  S = S & N & "    </Compile>"
  S = S & N & "    <Compile Include=""Properties\Resources.Designer.cs"">"
  S = S & N & "      <AutoGen>True</AutoGen>"
  S = S & N & "      <DesignTime>True</DesignTime>"
  S = S & N & "      <DependentUpon>Resources.resx</DependentUpon>"
  S = S & N & "    </Compile>"
  S = S & N & "    <Compile Include=""Properties\Settings.Designer.cs"">"
  S = S & N & "      <AutoGen>True</AutoGen>"
  S = S & N & "      <DependentUpon>Settings.settings</DependentUpon>"
  S = S & N & "      <DesignTimeSharedInput>True</DesignTimeSharedInput>"
  S = S & N & "    </Compile>"
  S = S & N & "    <EmbeddedResource Include=""Properties\Resources.resx"">"
  S = S & N & "      <Generator>ResXFileCodeGenerator</Generator>"
  S = S & N & "      <LastGenOutput>Resources.Designer.cs</LastGenOutput>"
  S = S & N & "    </EmbeddedResource>"
  S = S & N & "    <None Include=""Properties\Settings.settings"">"
  S = S & N & "      <Generator>SettingsSingleFileGenerator</Generator>"
  S = S & N & "      <LastGenOutput>Settings.Designer.cs</LastGenOutput>"
  S = S & N & "    </None>"
  S = S & N & "  </ItemGroup>"
  S = S & N & "  <ItemGroup>"
  S = S & N & "    <None Include=""App.config"" />"
  S = S & N & "  </ItemGroup>"
  S = S & N & "  <ItemGroup>"
  S = S & N & "    <COMReference Include=""ADODB"">"
  S = S & N & "      <Guid>{B691E011-1797-432E-907A-4D8C69339129}</Guid>"
  S = S & N & "      <VersionMajor>6</VersionMajor>"
  S = S & N & "      <VersionMinor>1</VersionMinor>"
  S = S & N & "      <Lcid>0</Lcid>"
  S = S & N & "      <WrapperTool>tlbimp</WrapperTool>"
  S = S & N & "      <Isolated>False</Isolated>"
  S = S & N & "      <EmbedInteropTypes>True</EmbedInteropTypes>"
  S = S & N & "    </COMReference>"
  S = S & N & "  </ItemGroup>"
  S = S & N & "  <Import Project=""$(MSBuildToolsPath)\Microsoft.CSharp.targets"" />"
  S = S & N & "</Project>"
  
  CreateProjectFile = S
  
  WriteOut ChgExt(FileName(vbpFile), ".csproj"), S
End Function

Public Function VBExtensionClass() As String
  Dim S As String, M As String, N As String
  Dim L
  S = ""
  M = ""
  N = vbCrLf
  
'  S = S & M & ""
'  S = S & M & UsingEverything
'  S = S & N



  S = S & N & "using Microsoft.VisualBasic;"
  S = S & N & "using Microsoft.VisualBasic.PowerPacks.Printing.Compatibility.VB6;"
  S = S & N & "using System;"
  S = S & N & "using System.Collections.Generic;"
  S = S & N & "using System.Collections.ObjectModel;"
  S = S & N & "using System.Globalization;"
  S = S & N & "using System.Windows;"
  S = S & N & "using System.Windows.Controls;"
  S = S & N & "using System.Windows.Controls.Primitives;"
  S = S & N & "using System.Windows.Input;"
  S = S & N & "using System.Windows.Interop;"
  S = S & N & "using System.Windows.Media;"
  S = S & N & "using System.Windows.Media.Imaging;"
  S = S & N & "using System.Windows.Threading;"
  S = S & N & "using static Microsoft.VisualBasic.Conversion;"
  S = S & N & "using static modDataValidation;"
  S = S & N & ""
  S = S & N & "public static class VBExtension"
  S = S & N & "{"
  S = S & N & "    private static Printer mPrinter = new Printer();"
  S = S & N & "    public enum vbTriState { vbFalse = 0, vbTrue = -1, vbUseDefault = -2 }"
  S = S & N & ""
  S = S & N & "    public static int MousePointer { get { return 0; } set { } }"
  S = S & N & "    public static int SenderIndex(string name) { return ValI(name.Substring(name.LastIndexOf('_') + 1)); }"
  S = S & N & "    public static int SenderIndex(object sender) { return SenderIndex(((FrameworkElement)sender).Name); }"
  S = S & N & ""
  S = S & N & "    public static List<Printer> Printers { get { List<Printer> L = new List<Printer>(); foreach (var P in new PrinterCollection()) L.Add((Printer)P); return L; } }"
  S = S & N & "    public static Printer Printer"
  S = S & N & "    {"
  S = S & N & "        get => mPrinter ?? new Printer();"
  S = S & N & "        set { foreach (var P in Printers) { if (((Printer)P).DeviceName == value.DeviceName) mPrinter = P; } }"
  S = S & N & "    }"
  S = S & N & "    public static void PrintPicture(this Printer P, BitmapImage I, dynamic x1 = null, dynamic y1 = null, dynamic w1 = null, dynamic h1 = null, dynamic x2 = null, dynamic y2 = null, dynamic w2 = null, dynamic h2 = null)"
  S = S & N & "    { System.Drawing.Image I2 = null; P.PaintPicture(I2, ValF(x1), ValF(y1), ValF(w1), ValF(h1), ValF(x2), ValF(h2), ValF(w2), ValF(h2)); }"
  S = S & N & "    public static void PrintPicture(this Printer P, ImageSource I, dynamic x1 = null, dynamic y1 = null, dynamic w1 = null, dynamic h1 = null, dynamic x2 = null, dynamic y2 = null, dynamic w2 = null, dynamic h2 = null)"
  S = S & N & "    { System.Drawing.Image I2 = null; P.PaintPicture(I2, ValF(x1), ValF(y1), ValF(w1), ValF(h1), ValF(x2), ValF(h2), ValF(w2), ValF(h2)); }"
  S = S & N & "    public static void PaintPicture(this Printer P, System.Windows.Controls.Image I, dynamic x1 = null, dynamic y1 = null, dynamic w1 = null, dynamic h1 = null, dynamic x2 = null, dynamic y2 = null, dynamic w2 = null, dynamic h2 = null)"
  S = S & N & "    { System.Drawing.Image I2 = null; P.PaintPicture(I2, ValF(x1), ValF(y1), ValF(w1), ValF(h1), ValF(x2), ValF(h2), ValF(w2), ValF(h2)); }"
  S = S & N & "    public static void PaintPicture(this Image P, System.Windows.Controls.Image I, dynamic x1 = null, dynamic y1 = null, dynamic w1 = null, dynamic h1 = null, dynamic x2 = null, dynamic y2 = null, dynamic w2 = null, dynamic h2 = null)"
  S = S & N & "    { System.Drawing.Image I2 = null; }"
  S = S & N & "    public static void PrintNNL(this Printer P, params String[] s) { float Y = P.CurrentY; P.Print(s); P.CurrentY = Y; }"
  S = S & N & "    public static void Line(this Printer P, float X1, float Y1, float X2, float Y2, int Style = 0, bool Box = false) { }"
  S = S & N & "    public static void LineStep(this Printer P, float X1, float Y1, float X2, float Y2, int Style = 0, bool Box = false) { }"
  S = S & N & "    public static void Box(this Printer P, float X1, float Y1, float X2, float Y2, int Style = 0, bool Box = false) { }"
  S = S & N & "    public static void BoxStep(this Printer P, float X1, float Y1, float X2, float Y2, int Style = 0, bool Box = false) { }"
  S = S & N & "    public static void Circle(this Printer P, float X1, float Y1, float X2, float Y2, float Radius = 0, bool Box = false) { }"
  S = S & N & "    public static string Tab(int N) { return ""; }"
  S = S & N & ""
  S = S & N & "    public static void Load(Window Ob) { }"
  S = S & N & "    public static void CenterInScreen(this Window Ob)"
  S = S & N & "    {"
  S = S & N & "        Ob.Left = (System.Windows.SystemParameters.PrimaryScreenWidth - Ob.Width) / 2;"
  S = S & N & "        Ob.Top = (System.Windows.SystemParameters.PrimaryScreenHeight - Ob.Height) / 2;"
  S = S & N & "    }"
  S = S & N & "    public static void Stop(int code = 1) { Environment.Exit(code); }"
  S = S & N & ""
  S = S & N & "    public static bool IIf(bool A, bool B, bool C) { return !!A ? B : C; }"
  S = S & N & "    public static string IIf(bool A, string B, string C) { return !!A ? B : C; }"
  S = S & N & "    public static double IIf(bool A, double B, double C) { return !!A ? B : C; }"
  S = S & N & "    public static decimal IIf(bool A, decimal B, decimal C) { return !!A ? B : C; }"
  S = S & N & "    public static int IIf(bool A, int B, int C) { return !!A ? B : C; }"
  S = S & N & "    public static decimal ValD(string A) { return (decimal)Val(A.Replace("","", """")); }"
  S = S & N & "    public static decimal ValD(decimal A) { return A; }"
  S = S & N & "    public static decimal ValD(int A) { return (decimal)A; }"
  S = S & N & "    public static decimal ValD(double A) { return (decimal)A; }"
  S = S & N & "    public static float ValF(string A) { return ValF(ValD(A)); }"
  S = S & N & "    public static float ValF(decimal A) { return (float)A; }"
  S = S & N & "    public static int ValL(string A) { return (int)Val(A); }"
  S = S & N & "    public static int ValI(string A) { return (int)Val(A); }"
  S = S & N & "    public static int ValI(int A) { return A; }"
  S = S & N & "    public static int ValI(decimal A) { return (int)A; }"
  S = S & N & "    public static int ValI(float A) { return (int)A; }"
  S = S & N & "    public static int ValI(double A) { return (int)A; }"
  S = S & N & "    public static int ValI(bool A) { return A ? 1 : 0; }"
  S = S & N & "    public static DateTime IIf(bool A, DateTime B, DateTime C) { return !!A ? B : C; }"
  S = S & N & ""
  S = S & N & "    public static string Spc(int I) { return Strings.StrDup(I, ' '); }"
  S = S & N & "    public static decimal TextWidth(string S) { return S.Length * 10m; }"
  S = S & N & "    public static decimal TextHeight(string S) { return modTextFiles.CountLines(S) * 10m; }"
  S = S & N & "    public static int ScaleX(int X, dynamic A, dynamic B) { return X; }"
  S = S & N & "    public static int ScaleY(int Y, dynamic A, dynamic B) { return Y; }"
  S = S & N & ""
  S = S & N & "    public static bool IsEmpty(object A) { return false; }"
  S = S & N & "    public static bool IsMissing(object A) { return false; }"
  S = S & N & "    public static bool IsNull(object A) { return A == null || (A is System.DBNull); }"
  S = S & N & "    public static bool IsNothing(object A) { return IsNull(A); }"
  S = S & N & "    public static bool IsObject(object A) { return !IsNothing(A); }"
  S = S & N & ""
  S = S & N & "    public static bool IsDate(string D) { try { System.DateTime.Parse(D); } catch { return false; } return true; }"
  S = S & N & ""
  S = S & N & "    public static DateTime CDate(dynamic A) { if (A is DateTime) return A; return IsDate(A.ToString()) ? DateTime.MinValue : System.DateTime.Parse(A.ToString()); }"
  S = S & N & "    public static double CDbl(object A) { return (A is System.IConvertible) ? ((System.IConvertible)A).ToDouble(null) : 0; }"
  S = S & N & "    public static decimal CDec(object A) { return (decimal)((A is System.IConvertible) ? ((System.IConvertible)A).ToDouble(null) : 0); }"
  S = S & N & "    public static long CLng(object A) { return (A is System.IConvertible) ? ((System.IConvertible)A).ToInt64(null) : 0; }"
  S = S & N & "    public static int CInt(object A) { return (A is System.IConvertible) ? ((System.IConvertible)A).ToInt32(null) : 0; }"
  S = S & N & "    public static string CStr(object A) { return A.ToString(); }"
  S = S & N & "    public static bool CBool(object A) { { return (A is System.IConvertible) ? ((System.IConvertible)A).ToBoolean(null) : false; } }"
  S = S & N & "    public static decimal CCur(decimal A) { return A; }"
  S = S & N & "    //public static string Chr(int C) { return Chr((int)C); }"
  S = S & N & "    //public static string Mid(string S, int F) { return Mid(S, (int)F); }"
  S = S & N & "    //public static string Mid(string S, int F, int L) { return Mid(S, (int)F, (int)L); }"
  S = S & N & "    //public static string Left(string S, int F) { return Left(S, (int)F); }"
  S = S & N & "    //public static string Right(string S, int F) { return Right(S, (int)F); }"
  S = S & N & "    public static decimal RndD() { return (decimal)VBMath.Rnd(); }"
  S = S & N & ""
  S = S & N & "    public static List<Window> Forms"
  S = S & N & "    {"
  S = S & N & "        get"
  S = S & N & "        {"
  S = S & N & "            List<Window> ret = new List<Window>();"
  S = S & N & "            if (Application.Current == null) return ret;"
  S = S & N & "            foreach (Window w in Application.Current.Windows) ret.Add(w);"
  S = S & N & "            return ret;"
  S = S & N & "        }"
  S = S & N & "    }"
  S = S & N & ""
  S = S & N & "    public static System.Windows.Media.Brush ColorToBrush(String C)"
  S = S & N & "    { return (System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFromString(C); }"
  S = S & N & "    public static System.Windows.Media.Brush ColorToBrush(uint C)"
  S = S & N & "    { return (System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFromString(""#"" + C.ToString(""X"")); }"
  S = S & N & ""
  S = S & N & "    public static DateInterval getDateInterval(string s)"
  S = S & N & "    {"
  S = S & N & "        switch (s)"
  S = S & N & "        {"
  S = S & N & "            case ""y"": return DateInterval.Year;"
  S = S & N & "            case ""m"": return DateInterval.Month;"
  S = S & N & "            case ""w"": return DateInterval.WeekOfYear;"
  S = S & N & "            case ""h"": return DateInterval.Hour;"
  S = S & N & "            case ""d"": return DateInterval.Day;"
  S = S & N & "            case ""n"": return DateInterval.Minute;"
  S = S & N & "            case ""s"": return DateInterval.Second;"
  S = S & N & "            default: return DateInterval.Day;"
  S = S & N & "        }"
  S = S & N & "    }"
  S = S & N & "    //public static DateTime DateAdd1(string unit, int amount, DateTime when) { return DateAndTime.DateAdd(getDateInterval(unit), amount, when); }"
  S = S & N & ""
  S = S & N & "    public static System.DateTime DateValue(object A) { return CDate(A); }"
  S = S & N & ""
  S = S & N & "    public static bool IsList(object A) { return A != null && (A is System.Collections.IList); }"
  S = S & N & "    public static int LBound(object A) { return 0; }"
  S = S & N & "    public static int UBound(object A) { return A != null && (A is System.Collections.IList) ? ((System.Collections.IList)A).Count - 1 : 0; }"
  S = S & N & ""
  S = S & N & "    public static bool IsLike(string A, string B) { return Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeString(A, B, Microsoft.VisualBasic.CompareMethod.Binary); }"
  S = S & N & ""
  S = S & N & "    public static bool VBOpenFile(dynamic A, dynamic B) { return false; }"
  S = S & N & "    public static bool VBWriteFile(dynamic A, dynamic B) { return false; }"
  S = S & N & "    public static bool VBCloseFile(dynamic A) { return false; }"
  S = S & N & "    public static string VBReadFileLine(dynamic A, dynamic B) { return ""; }"
  S = S & N & "    public static bool DoEvents() { return false; }"
  S = S & N & ""
  S = S & N & "    public static bool Resume() { return false; }"
  S = S & N & "    public static bool End() { return false; }"
  S = S & N & "    public static bool HasEmptyText(this TextBox textBox) { return string.IsNullOrEmpty(textBox.Text); }"
  S = S & N & "    public static decimal getValue(this TextBox textBox) { try { return Decimal.Parse(textBox.Text); } catch { return 0; } }"
  S = S & N & "    public static decimal setValue(this TextBox textBox, decimal value) { textBox.Text = FormatQuantity(value); return getValue(textBox); }"
  S = S & N & "    public static decimal setCurrency(this TextBox c, decimal value) { c.Text = CurrencyFormat(value); return c.getCurrency(); }"
  S = S & N & "    public static decimal getCurrency(this TextBox c) { return ValD(c.Text); }"
  S = S & N & "    public static decimal getValueCurrency(this TextBox c) { return ValD(c.Text); }"
  S = S & N & "    public static decimal setValueCurrency(this TextBox c, decimal value) { c.Text = CurrencyFormat(value); return c.getCurrency(); }"
  S = S & N & "    public static int getValueLong(this TextBox textBox) { try { return int.Parse(textBox.Text); } catch { return 0; } }"
  S = S & N & "    public static int setValueLong(this TextBox textBox, int value) { textBox.Text = value.ToString(); return getValueLong(textBox); }"
  S = S & N & "    public static DateTime? getValueDate(this TextBox textBox, DateTime? defaultDate = null) { try { return DateValue(textBox.Text); } catch { return defaultDate; } }"
  S = S & N & "    public static DateTime? setValueDate(this TextBox textBox, DateTime? value) { textBox.Text = value == null ? "" : ((DateTime)value).ToShortDateString(); return textBox.getValueDate(); }"
  S = S & N & "    public static decimal getValue(this Label label) { try { return ValD(label.Content.ToString()); } catch { return 0; } }"
  S = S & N & "    public static decimal setValue(this Label label, decimal value) { label.Content = FormatQuantity(value); return getValue(label); }"
  S = S & N & "    public static decimal setCurrency(this Label c, decimal value) { c.Content = CurrencyFormat(value); return c.getCurrency(); }"
  S = S & N & "    public static decimal getCurrency(this Label c) { return ValD(c.Content.ToString()); }"
  S = S & N & "    public static decimal getValueCurrency(this Label c) { return ValD(c.Content.ToString()); }"
  S = S & N & "    public static decimal setValueCurrency(this Label c, decimal value) { c.Content = CurrencyFormat(value); return c.getCurrency(); }"
  S = S & N & "    public static int getValueLong(this Label textBox) { try { return int.Parse(textBox.Content.ToString()); } catch { return 0; } }"
  S = S & N & "    public static int setValueLong(this Label textBox, int value) { textBox.Content = value.ToString(); return getValueLong(textBox); }"
  S = S & N & "    public static DateTime? getValueDate(this Label textBox, DateTime? defaultDate = null) { try { return DateValue(textBox.Content.ToString()); } catch { return defaultDate; } }"
  S = S & N & "    public static DateTime? setValueDate(this Label textBox, DateTime? value) { textBox.Content = value == null ? "" : ((DateTime)value).ToShortDateString(); return textBox.getValueDate(); }"
  S = S & N & ""
  S = S & N & "    public static bool getValue(this CheckBox chk) { try { return ((bool)chk.IsChecked); } catch { return false; } }"
  S = S & N & "    public static bool setValue(this CheckBox chk, bool value) { chk.IsChecked = value; return getValue(chk); }"
  S = S & N & "    //    public static int getValue(this CheckBox chk) { try { return ((bool)chk.IsChecked); } catch { return false; } }"
  S = S & N & "    public static int setValue(this CheckBox chk, int value) { chk.IsChecked = value != 1; return getValue(chk) ? 1 : 0; }"
  S = S & N & ""
  S = S & N & "    public static bool getValue(this Button btn) { try { return ((bool)btn.IsPressed); } catch { return false; } }"
  S = S & N & "    public static bool setValue(this Button btn, bool value) { try { btn.RaiseEvent(new RoutedEventArgs(Button.ClickEvent)); return true; } catch { return false; } }"
  S = S & N & "    public static BitmapImage getImage(this Button btn)"
  S = S & N & "    {"
  S = S & N & "        try"
  S = S & N & "        {"
  S = S & N & "            Image T = null;"
  S = S & N & "            dynamic c = btn.Content;"
  S = S & N & ""
  S = S & N & "            if (c is Image) T = c;"
  S = S & N & "            if (c is Panel)"
  S = S & N & "                foreach (var l in c.Children) if (l is Image) { T = (Image)l; break; }"
  S = S & N & ""
  S = S & N & "            if (T is null) return null;"
  S = S & N & "            return (BitmapImage)T.Source;"
  S = S & N & "        }"
  S = S & N & "        catch { return null; }"
  S = S & N & "    }"
  S = S & N & "    public static BitmapImage setImage(this Button Cmd, BitmapImage value)"
  S = S & N & "    {"
  S = S & N & "        try"
  S = S & N & "        {"
  S = S & N & "            if (Cmd.Content is string)"
  S = S & N & "            {"
  S = S & N & "                string caption = Cmd.Content.ToString();"
  S = S & N & "                Canvas C = new Canvas();"
  S = S & N & "                Cmd.Content = C;"
  S = S & N & "                C.Width = Cmd.Width;"
  S = S & N & "                C.Height = Cmd.Height;"
  S = S & N & "                Label L = new Label();"
  S = S & N & "                L.Content = caption;"
  S = S & N & "                C.Children.Add(L);"
  S = S & N & "                L.FontSize = 12d;"
  S = S & N & "                L.Padding = new Thickness(0);"
  S = S & N & "                L.Width = L.MeasureString(caption).Width;"
  S = S & N & "                L.Height = L.MeasureString(caption).Height;"
  S = S & N & "                Canvas.SetLeft(L, (Cmd.Width - L.Width) / 2);"
  S = S & N & "                Canvas.SetTop(L, Cmd.Height - L.Height - 10);"
  S = S & N & "                Image I = new Image();"
  S = S & N & "                C.Children.Add(I);"
  S = S & N & "                I.Width = Cmd.Width - 10;"
  S = S & N & "                I.Height = Cmd.Height - L.Height - 12;"
  S = S & N & "                I.Stretch = System.Windows.Media.Stretch.Uniform;"
  S = S & N & "                I.Source = value;"
  S = S & N & "                Canvas.SetLeft(I, (Cmd.Width - I.Width) / 2);"
  S = S & N & "                Canvas.SetTop(I, 0);"
  S = S & N & "                return value;"
  S = S & N & "            }"
  S = S & N & "            else if (Cmd.Content is Panel)"
  S = S & N & "            {"
  S = S & N & "                Image I = (Image)((Panel)Cmd.Content).ControlOf(typeof(Image), 0);"
  S = S & N & "                if (I == null) return null;"
  S = S & N & "                I.Source = value;"
  S = S & N & "                return value;"
  S = S & N & "            }"
  S = S & N & "            else if (Cmd.Content is Image)"
  S = S & N & "            {"
  S = S & N & "                ((Image)Cmd.Content).Source = value;"
  S = S & N & "                return value;"
  S = S & N & "            }"
  S = S & N & "        }"
  S = S & N & "        catch { return null; }"
  S = S & N & "        return null;"
  S = S & N & "    }"
  S = S & N & "    public static string getCaption(this Button btn)"
  S = S & N & "    {"
  S = S & N & "        try"
  S = S & N & "        {"
  S = S & N & "            Label T = null;"
  S = S & N & "            foreach (var c in ((Panel)btn.Content).Children) if (c is Label) { T = (Label)c; break; }"
  S = S & N & "            if (T is null) return "";"
  S = S & N & "            if (T.Content is null) return "";"
  S = S & N & "            return T.Content.ToString();"
  S = S & N & "        }"
  S = S & N & "        catch { return ""; }"
  S = S & N & "    }"
  S = S & N & "    public static string setCaption(this Button btn, string value)"
  S = S & N & "    {"
  S = S & N & "        Label T = null;"
  S = S & N & "        if (btn.Content is Panel)"
  S = S & N & "            foreach (var c in ((Panel)btn.Content).Children) if (c is Label) { T = (Label)c; break; }"
  S = S & N & "        if (btn.Content is Label) T = (Label)btn.Content;"
  S = S & N & "        if (T is null) return "";"
  S = S & N & "        return (string)(T.Content = value);"
  S = S & N & "    }"
  S = S & N & ""
  S = S & N & "    public static bool getVisible(this FrameworkElement c) { return c.Visibility == System.Windows.Visibility.Visible; }"
  S = S & N & "    public static bool isVisible(this FrameworkElement c) { if (c == null) return false; return c.Visibility == System.Windows.Visibility.Visible; }"
  S = S & N & "    public static bool setVisible(this FrameworkElement c, bool value) { if (c == null) return false; c.Visibility = value ? System.Windows.Visibility.Visible : System.Windows.Visibility.Hidden; return c.getVisible(); }"
  S = S & N & "    public static bool Locked(this TextBox t, bool value = true) { return false; }"
  S = S & N & "    public static bool Locked(this ComboBox t, bool value = true) { return false; }"
  S = S & N & "    public static bool Locked(this ListBox t, bool value = true) { return false; }"
  S = S & N & "    public static bool setToolTipText(this FrameworkElement c, string Id) { return true; }"
  S = S & N & "    public static string getToolTipText(this FrameworkElement c) { return ""; }"
  S = S & N & "    public static void ZOrder(this FrameworkElement c, int v) { }"
  S = S & N & "    public static void SelectContents(this TextBox c) { c.SelectionStart = 0; c.SelectionLength = c.Text.Length; }"
  S = S & N & "    public static void FocusSelect(this TextBox c) { c.SelectionStart = 0; c.SelectionLength = c.Text.Length; c.Focus(); }"
  S = S & N & "    public static void SelectContents(this ComboBox c) { }"
  S = S & N & "    public static void toUpper(this TextBox c) { if (c.Text != c.Text.ToUpper()) c.Text = c.Text.ToUpper(); }"
  S = S & N & ""
  S = S & N & "    public static string getText(this RichTextBox r) { return ""; }"
  S = S & N & "    public static string setText(this RichTextBox r, string v) { return ""; }"
  S = S & N & "    public static bool LoadFile(this RichTextBox r, string f) { return true; }"
  S = S & N & ""
  S = S & N & "    private static Action EmptyDelegate = delegate () { };"
  S = S & N & "    public static void Refresh(this UIElement uiElement) { uiElement.Dispatcher.Invoke(DispatcherPriority.Render, EmptyDelegate); }"
  S = S & N & "    public static bool SetFocus(this FrameworkElement c) { try { return c.Focus(); } catch { return false; } }"
  S = S & N & "    //public static bool Move(this Control c, double X = -10000, double Y = -10000, double W = -1000, double H = -10000, bool MakeVisible = false)"
  S = S & N & "    //{ return c.Move((decimal)X, (decimal)Y, (decimal)W, (decimal)H, MakeVisible); }"
  S = S & N & "    public static bool Move(this FrameworkElement c, decimal X = -10000, decimal Y = -10000, decimal W = -10000, decimal H = -10000, bool MakeVisible = false)"
  S = S & N & "    {"
  S = S & N & "        if (W > 0) c.Width = (double)W;"
  S = S & N & "        if (H > 0) c.Height = (double)H;"
  S = S & N & "        Thickness t = c.Margin;"
  S = S & N & "        if (X != -10000 && X != -1) t.Left = (double)X;"
  S = S & N & "        if (Y != -10000 && Y != -1) t.Top = (double)Y;"
  S = S & N & "        c.Margin = t;"
  S = S & N & "        //c.Margin = new Thickness("
  S = S & N & "        //    X == -10000 || X == -1 ? c.Margin.Left : (double)X,"
  S = S & N & "        //    Y == -10000 || Y == -1 ? c.Margin.Top : (double)Y,"
  S = S & N & "        //    0, 0"
  S = S & N & "        //    );"
  S = S & N & "        if (MakeVisible) c.Visibility = Visibility.Visible;"
  S = S & N & "        //try { c.Focus(); } catch { }"
  S = S & N & "        return false;"
  S = S & N & "    }"
  S = S & N & "    public static bool Move(this FrameworkElement c, double X = -10000, double Y = -10000, double W = -10000, double H = -10000, bool MakeVisible = false)"
  S = S & N & "    { return c.Move((decimal)W, (decimal)H, (decimal)W, (decimal)H, MakeVisible); }"
  S = S & N & "    public static void setWindowState(this Window w, WindowState X) { w.WindowState = X; }"
  S = S & N & ""
  S = S & N & "    public static string AppHelpFile() { return ""; }"
  S = S & N & "    public static bool Show(this Window w, int Modal) { w.ShowDialog(); return true; }"
  S = S & N & "    //public static bool Load(this Window w) { return true; }"
  S = S & N & "    public static void setHelpContextID(this Window w, int Id) { }"
  S = S & N & "    public static int getHelpContextID(this Window wId) { return 0; }"
  S = S & N & "    public static double ScaleWidth(this Window w) { return w.Width; ; }"
  S = S & N & "    public static double ScaleHeight(this Window w) { return w.Height; }"
  S = S & N & "    public static IntPtr hWnd(this Window w) { return new WindowInteropHelper(Window.GetWindow(w)).Handle; }"
  S = S & N & "    public static IntPtr hWnd(this FrameworkElement w) { return new WindowInteropHelper(Window.GetWindow(w)).Handle; }"
  S = S & N & "    public static bool getVisible(this Window w) { return w.Visibility == System.Windows.Visibility.Visible; }"
  S = S & N & "    public static bool setVisible(this Window w, bool value) { w.Visibility = value ? System.Windows.Visibility.Visible : System.Windows.Visibility.Hidden; return w.getVisible(); }"
  S = S & N & ""
  S = S & N & "    public static Size MeasureString(this Label el, string candidate)"
  S = S & N & "    {"
  S = S & N & "        var formattedText = new FormattedText(candidate, CultureInfo.CurrentCulture, FlowDirection.LeftToRight,"
  S = S & N & "            new Typeface(el.FontFamily, el.FontStyle, el.FontWeight, el.FontStretch),"
  S = S & N & "            el.FontSize, Brushes.Black, new NumberSubstitution(), TextFormattingMode.Display);"
  S = S & N & "        return new Size(formattedText.Width, formattedText.Height);"
  S = S & N & "    }"
  S = S & N & "    public static Size MeasureString(this TextBox el, string candidate)"
  S = S & N & "    {"
  S = S & N & "        var formattedText = new FormattedText(candidate, CultureInfo.CurrentCulture, FlowDirection.LeftToRight,"
  S = S & N & "            new Typeface(el.FontFamily, el.FontStyle, el.FontWeight, el.FontStretch),"
  S = S & N & "            el.FontSize, Brushes.Black, new NumberSubstitution(), TextFormattingMode.Display);"
  S = S & N & "        return new Size(formattedText.Width, formattedText.Height);"
  S = S & N & "    }"
  S = S & N & "    public static Size MeasureString(this Window el, string candidate)"
  S = S & N & "    {"
  S = S & N & "        var formattedText = new FormattedText(candidate, CultureInfo.CurrentCulture, FlowDirection.LeftToRight,"
  S = S & N & "            new Typeface(el.FontFamily, el.FontStyle, el.FontWeight, el.FontStretch),"
  S = S & N & "            el.FontSize, Brushes.Black, new NumberSubstitution(), TextFormattingMode.Display);"
  S = S & N & "        return new Size(formattedText.Width, formattedText.Height);"
  S = S & N & "    }"
  S = S & N & "    public static double TextWidth(this Canvas t, string s) { return ((Window)t.Parent).MeasureString(s).Width; }"
  S = S & N & "    public static double TextHeight(this Canvas t, string s) { return ((Window)t.Parent).MeasureString(s).Height; }"
  S = S & N & "    public static double TextWidth(this Label t, string s) { return t.MeasureString(s).Width; }"
  S = S & N & "    public static double TextHeight(this Label t, string s) { return t.MeasureString(s).Height; }"
  S = S & N & "    public class ScreenMetrics"
  S = S & N & "    {"
  S = S & N & "        public int Width => (int)System.Windows.SystemParameters.PrimaryScreenWidth;"
  S = S & N & "        public int Height => (int)System.Windows.SystemParameters.PrimaryScreenHeight;"
  S = S & N & "        public FrameworkElement ActiveControl;"
  S = S & N & "    }"
  S = S & N & "    public static ScreenMetrics Screen { get => new ScreenMetrics(); }"
  S = S & N & ""
  S = S & N & "    public static int itemData(this ComboBox c, int I) { try { return (((ComboboxItem)c.Items[I]).Value); } catch (Exception e) { return 0; } }"
  S = S & N & "    public static int AddItem(this ComboBox c, string C) { return c.Items.Add(new ComboboxItem(C)); }"
  S = S & N & "    public static int AddItem(this ComboBox c, string C, int D) { return c.Items.Add(new ComboboxItem(C, D)); }"
  S = S & N & "    public static int AddItem(this ComboBox c, string C, bool Select) { ComboboxItem x = new ComboboxItem(C); int res = c.Items.Add(x); if (Select) c.SelectedItem = x; return res; }"
  S = S & N & "    public static int AddItem(this ComboBox c, string C, int D, bool Select) { ComboboxItem x = new ComboboxItem(C, D); int res = c.Items.Add(x); if (Select) c.SelectedItem = x; return res; }"
  S = S & N & "    public static String List(this ComboBox c, int Index) { return Index < c.Items.Count ? c.Items[Index].ToString() : null; }"
  S = S & N & "    public static string SetItemText(this ComboBox c, int Index, string Text) { return ((ComboboxItem)c.Items[Index]).Text = Text; }"
  S = S & N & "    public static int SelectedValue(this ComboBox c) { return ((ComboboxItem)c.SelectedItem).Value; }"
  S = S & N & "    public static string SelectedText(this ComboBox c) { return c.SelectedItem == null ? "" : ((ComboboxItem)c.SelectedItem).Text; }"
  S = S & N & "    public static void RemoveItem(this ComboBox c, int Index) { c.Items.RemoveAt(Index); }"
  S = S & N & "    public static void Clear(this ComboBox c) { c.Items.Clear(); }"
  S = S & N & ""
  S = S & N & "    public static int itemData(this ListBox c, int I) { try { return ((int)((ComboboxItem)c.Items[I]).Value); } catch (Exception e) { return 0; } }"
  S = S & N & "    public static int SelectItem(this ListBox c, int I, bool isSelected)"
  S = S & N & "    {"
  S = S & N & "        if (c.SelectionMode == SelectionMode.Multiple)"
  S = S & N & "        { if (isSelected) c.SelectedItems.Add(c.Items[I]); else c.SelectedItems.Remove(c.Items[I]); }"
  S = S & N & "        else { if (isSelected) c.SelectedItem = c.Items[I]; else { if (c.SelectedItem == c.Items[I]) c.SelectedItem = null; } }"
  S = S & N & "        return I;"
  S = S & N & "    }"
  S = S & N & "    public static bool Selected(this ListBox c, int I) { return c.SelectedItems.Contains(c.Items[I]); }"
  S = S & N & "    public static bool Selected(this ListBox c, int I, bool Value) { if (Value) c.SelectedItems.Add(c.Items[I]); else c.SelectedItems.Remove(c.Items[I]); return c.Selected(I); }"
  S = S & N & "    public static string SelectedText(this ListBox c) { return c.SelectedItem == null ? "" : ((ComboboxItem)c.SelectedItem).ToString(); }"
  S = S & N & "    public static int AddItem(this ListBox c, string C) { return c.Items.Add(new ComboboxItem(C)); }"
  S = S & N & "    public static int AddItem(this ListBox c, string C, int D) { return c.Items.Add(new ComboboxItem(C, D)); }"
  S = S & N & "    public static int AddItem(this ListBox c, string C, bool Selected) { int x = c.Items.Add(new ComboboxItem(C)); return SelectItem(c, x, Selected); }"
  S = S & N & "    public static int AddItem(this ListBox c, string C, int D, bool Selected) { int x = c.Items.Add(new ComboboxItem(C, D)); return SelectItem(c, x, Selected); }"
  S = S & N & "    public static void RemoveItem(this ListBox c, int Index) { c.Items.RemoveAt(Index); }"
  S = S & N & "    public static string List(this ListBox c, int Index) { return modNumbers.InRange(0, Index, c.Items.Count) ? c.Items[Index].ToString() : ""; }"
  S = S & N & ""
  S = S & N & "    public static bool getSelected(this ListBox c, int I) { return c.SelectedItems.Contains(c.Items[I]); }"
  S = S & N & "    public static int setSelected(this ListBox c, int I, bool V) { return c.SelectedItems.Add(c.Items[I]); }"
  S = S & N & "    public static bool Clear(this ListBox c) { c.Items.Clear(); return true; }"
  S = S & N & ""
  S = S & N & "    public static DateTime getDateTime(this DatePicker DP) { return DP.SelectedDate ?? DP.DisplayDate; }"
  S = S & N & "    public static string getDateString(this DatePicker DP) { return (DP.SelectedDate ?? DP.DisplayDate).ToShortDateString(); }"
  S = S & N & "    public static string getTimeString(this DatePicker DP) { return (DP.SelectedDate ?? DP.DisplayDate).ToShortTimeString(); }"
  S = S & N & ""
  S = S & N & "    public static int CurrentY(this Image I) { return 0; }"
  S = S & N & "    public static int CurrentX(this Image I) { return 0; }"
  S = S & N & ""
  S = S & N & "    public static BitmapImage PackageImage(string s)"
  S = S & N & "    {"
  S = S & N & "        string d = ""/Resources/Images/none.bmp"";"
  S = S & N & "        if (Strings.Left(s, 1) != " / ") s = ""/Resources/Images/"" + s;"
  S = S & N & "        s = ""pack://application:,,,"" + s;"
  S = S & N & "        try { return new BitmapImage(new Uri(@s)); }"
  S = S & N & "        catch (Exception e) { return new BitmapImage(new Uri(d, UriKind.Relative)); }"
  S = S & N & "    }"
  S = S & N & ""
  S = S & N & "    public class ComboboxItem"
  S = S & N & "    {"
  S = S & N & "        public ComboboxItem(string vText) { Text = vText; }"
  S = S & N & "        public ComboboxItem(string vText, int vValue) { Text = vText; Value = vValue; }"
  S = S & N & "        public string Text { get; set; }"
  S = S & N & "        public int Value { get; set; }"
  S = S & N & "        public override string ToString() { return Text; }"
  S = S & N & "    }"
  S = S & N & ""
  S = S & N & "    public class PropIndexer<I, V>"
  S = S & N & "    {"
  S = S & N & "        public delegate void setProperty(I idx, V value);"
  S = S & N & "        public delegate V getProperty(I idx);"
  S = S & N & ""
  S = S & N & "        public event getProperty getter;"
  S = S & N & "        public event setProperty setter;"
  S = S & N & ""
  S = S & N & "        public PropIndexer(getProperty g, setProperty s) { getter = g; setter = s; }"
  S = S & N & "        public PropIndexer(getProperty g) { getter = g; setter = setPropertyNoop; }"
  S = S & N & "        public PropIndexer() { getter = getPropertyNoop; setter = setPropertyNoop; }"
  S = S & N & ""
  S = S & N & "        public void setPropertyNoop(I idx, V value) { }"
  S = S & N & "        public V getPropertyNoop(I idx) { return default(V); }"
  S = S & N & ""
  S = S & N & "        public V this[I idx]"
  S = S & N & "        {"
  S = S & N & "            get => getter.Invoke(idx);"
  S = S & N & "            set => setter.Invoke(idx, value);"
  S = S & N & "        }"
  S = S & N & "    }"
  S = S & N & "    public class PropIndexer2<I, J, V>"
  S = S & N & "    {"
  S = S & N & "        public delegate void setProperty(I idx, J idx2, V value);"
  S = S & N & "        public delegate V getProperty(I idx, J idx2);"
  S = S & N & ""
  S = S & N & "        public event getProperty getter;"
  S = S & N & "        public event setProperty setter;"
  S = S & N & ""
  S = S & N & "        public PropIndexer2(getProperty g, setProperty s) { getter = g; setter = s; }"
  S = S & N & "        public PropIndexer2(getProperty g) { getter = g; setter = setPropertyNoop; }"
  S = S & N & "        public PropIndexer2() { getter = getPropertyNoop; setter = setPropertyNoop; }"
  S = S & N & ""
  S = S & N & "        public void setPropertyNoop(I idx, J idx2, V value) { }"
  S = S & N & "        public V getPropertyNoop(I idx, J idx2) { return default(V); }"
  S = S & N & ""
  S = S & N & "        public V this[I idx, J idx2]"
  S = S & N & "        {"
  S = S & N & "            get => getter.Invoke(idx, idx2);"
  S = S & N & "            set => setter.Invoke(idx, idx2, value);"
  S = S & N & "        }"
  S = S & N & "    }"
  S = S & N & "    public class Timer"
  S = S & N & "    {"
  S = S & N & "        private System.Windows.Threading.DispatcherTimer tmr = new System.Windows.Threading.DispatcherTimer();"
  S = S & N & "        public Action Action;"
  S = S & N & "        private void dispatcherTimer_Tick(object sender, EventArgs e) { if (Action != null) Action.Invoke(); }"
  S = S & N & ""
  S = S & N & "        public Timer(Action e = null, int vInterval = 1000, bool vEnabled = false)"
  S = S & N & "        {"
  S = S & N & "            tmr.Tick += dispatcherTimer_Tick;"
  S = S & N & "            Action = e;"
  S = S & N & "            Interval = vInterval;"
  S = S & N & "            Enabled = vEnabled;"
  S = S & N & "        }"
  S = S & N & ""
  S = S & N & "        public System.Windows.Threading.DispatcherTimer timer { get => tmr; }"
  S = S & N & ""
  S = S & N & "        public bool IsEnabled"
  S = S & N & "        {"
  S = S & N & "            get => tmr.IsEnabled;"
  S = S & N & "            set { tmr.IsEnabled = value; if (value) tmr.Start(); else tmr.Stop(); }"
  S = S & N & "        }"
  S = S & N & "        public bool Enabled { get => IsEnabled; set => IsEnabled = value; }"
  S = S & N & "        public Timer Discard() { Enabled = false; return null; }"
  S = S & N & ""
  S = S & N & "        public int Interval { get => (int)tmr.Interval.TotalMilliseconds; set => tmr.Interval = new TimeSpan(0, 0, 0, 0, value); }"
  S = S & N & "        public int IntervalSeconds { get => (int)tmr.Interval.TotalSeconds; set => tmr.Interval = new TimeSpan(0, 0, 0, value); }"
  S = S & N & "        public dynamic Tag { get; set; }"
  S = S & N & ""
  S = S & N & "        public TimeSpan getInterval() { return tmr.Interval; }"
  S = S & N & "        public void setInterval(TimeSpan value) { tmr.Interval = value; }"
  S = S & N & ""
  S = S & N & "        public void startTimer(int MilliSeconds) { Enabled = false; Interval = MilliSeconds; Enabled = true; }"
  S = S & N & "        public void startTimerSeconds(int Seconds) { Enabled = false; Interval = Seconds; Enabled = true; }"
  S = S & N & "        public void startTimer(int MilliSeconds, dynamic setTag) { Tag = setTag; startTimer(MilliSeconds); }"
  S = S & N & "        public void startTimerSeconds(int Seconds, dynamic setTag) { Tag = setTag; startTimerSeconds(Seconds); }"
  S = S & N & "        public void stopTimer() { Enabled = false; }"
  S = S & N & "    }"
  S = S & N & "    public static List<FrameworkElement> controlArray(this Window Frm, string name)"
  S = S & N & "    {"
  S = S & N & "        List<FrameworkElement> res = new List<FrameworkElement>();"
  S = S & N & "        Panel G = (Panel)Frm.Content;"
  S = S & N & "        foreach (var C in G.Children)"
  S = S & N & "            if (((FrameworkElement)C).Name.StartsWith(name + ""_"")) res.Add((FrameworkElement)C);"
  S = S & N & "        return res;"
  S = S & N & "    }"
  S = S & N & "    public static int controlIndex(this Control C) { try { return ValI(Strings.Mid(C.Name, C.Name.LastIndexOf('_') + 1)); } catch (Exception e) { } return -1; }"
  S = S & N & "    public static FrameworkElement getControlByIndex(this Window Frm, string Name, int Idx)"
  S = S & N & "    { foreach (var C in Frm.Controls(true)) if (C.Name == Name + ""_"" + Idx) return C; return null; }"
  S = S & N & "    public static FrameworkElement loadControlByIndex(this Window Frm, Type type, string Name, int Idx = -1)"
  S = S & N & "    {"
  S = S & N & "        FrameworkElement X = Frm.getControlByIndex(Name, Idx);"
  S = S & N & "        if (X != null) return X;"
  S = S & N & "        FrameworkElement C = (FrameworkElement)Activator.CreateInstance(type);"
  S = S & N & "        C.Name = Name + ""_"" + Idx;"
  S = S & N & "        Panel G = (Panel)Frm.Content;"
  S = S & N & "        G.Children.Add(C);"
  S = S & N & "        return C;"
  S = S & N & "    }"
  S = S & N & "    public static void unloadControlByIndex(this Window Frm, string Name, int Idx = -1)"
  S = S & N & "    {"
  S = S & N & "        FrameworkElement X = Frm.getControlByIndex(Name, Idx);"
  S = S & N & "        if (X != null)"
  S = S & N & "        {"
  S = S & N & "            Panel G = (Panel)Frm.Content;"
  S = S & N & "            G.Children.Remove(X);"
  S = S & N & "        }"
  S = S & N & "    }"
  S = S & N & "    public static void unloadControls(this Window Frm, string Name)"
  S = S & N & "    {"
  S = S & N & "        Panel G = (Panel)Frm.Content;"
  S = S & N & "        foreach (var C in Frm.Controls())"
  S = S & N & "        {"
  S = S & N & "            string N = ((FrameworkElement)C).Name;"
  S = S & N & "            if (N.StartsWith(Name + ""_"")) G.Children.Remove(C);"
  S = S & N & "        }"
  S = S & N & "    }"
  S = S & N & "    public static int controlUBound(this Window Frm, string Name)"
  S = S & N & "    {"
  S = S & N & "        int Max = -1;"
  S = S & N & "        foreach (var C in Frm.Controls(true))"
  S = S & N & "        {"
  S = S & N & "            string N = ((FrameworkElement)C).Name;"
  S = S & N & "            if (N.StartsWith(Name + ""_""))"
  S = S & N & "            {"
  S = S & N & "                int K = ValI(Strings.Mid(N, N.LastIndexOf('_') + 2));"
  S = S & N & "                if (K > Max) Max = K;"
  S = S & N & "            }"
  S = S & N & "        }"
  S = S & N & "        return Max;"
  S = S & N & "    }"
  S = S & N & ""
  S = S & N & "    public static List<FrameworkElement> Controls(this Window w, bool recurse = true)"
  S = S & N & "    {"
  S = S & N & "        Panel g = (Panel)w.Content;"
  S = S & N & "        UIElementCollection children = g.Children;"
  S = S & N & "        List<FrameworkElement> cts = new List<FrameworkElement>();"
  S = S & N & "        foreach (var e in children)"
  S = S & N & "        {"
  S = S & N & "            cts.Add((FrameworkElement)e);"
  S = S & N & "            if (recurse && e is GroupBox)"
  S = S & N & "                foreach (var f in ((GroupBox)e).Controls(recurse)) cts.Add((FrameworkElement)f);"
  S = S & N & "        }"
  S = S & N & "        return cts;"
  S = S & N & "    }"
  S = S & N & "    public static List<FrameworkElement> Controls(this GroupBox w, bool recurse = true)"
  S = S & N & "    {"
  S = S & N & "        Panel g = (Panel)w.Content;"
  S = S & N & "        UIElementCollection children = g.Children;"
  S = S & N & "        List<FrameworkElement> cts = new List<FrameworkElement>();"
  S = S & N & "        foreach (var e in children)"
  S = S & N & "        {"
  S = S & N & "            cts.Add((FrameworkElement)e);"
  S = S & N & "            if (recurse && e is GroupBox)"
  S = S & N & "                foreach (var f in ((GroupBox)e).Controls(recurse)) cts.Add((FrameworkElement)f);"
  S = S & N & "        }"
  S = S & N & "        return cts;"
  S = S & N & "    }"
  S = S & N & ""
  S = S & N & "    public static List<string> ControlNames(this Window w, bool recurse = true)"
  S = S & N & "    {"
  S = S & N & "        List<string> res = new List<string>();"
  S = S & N & "        foreach (var c in w.Controls(recurse)) res.Add(c.Name);"
  S = S & N & "        return res;"
  S = S & N & "    }"
  S = S & N & "    public static List<FrameworkElement> Controls(this Window w, Type T)"
  S = S & N & "    {"
  S = S & N & "        List<FrameworkElement> lst = w.Controls(), res = new List<FrameworkElement>();"
  S = S & N & "        foreach (var l in lst) if (l.GetType() == T) res.Add(l);"
  S = S & N & "        return res;"
  S = S & N & "    }"
  S = S & N & "    public static List<FrameworkElement> ControlOf(this Window w, Type T, int n = 0)"
  S = S & N & "    {"
  S = S & N & "        List<FrameworkElement> lst = w.Controls(T);"
  S = S & N & "        if (lst.Count == 0) return null;"
  S = S & N & "        return lst[modNumbers.FitRange(0, n, lst.Count - 1)];"
  S = S & N & "    }"
  S = S & N & "    public static FrameworkElement ControlOf(this Panel w, Type T, int n = 0)"
  S = S & N & "    {"
  S = S & N & "        List<FrameworkElement> lst = new List<FrameworkElement>();"
  S = S & N & "        foreach (var l in w.getControls(true)) if (l.GetType() == T) lst.Add(l);"
  S = S & N & "        if (lst.Count == 0) return null;"
  S = S & N & "        return lst[modNumbers.FitRange(0, n, lst.Count - 1)];"
  S = S & N & "    }"
  S = S & N & ""
  S = S & N & ""
  S = S & N & "    public static IEnumerable<FrameworkElement> getControls(this Visual parent, bool recurse = true)"
  S = S & N & "    {"
  S = S & N & "        List<FrameworkElement> res = new List<FrameworkElement>();"
  S = S & N & "        foreach (var el in parent.GetChildren(recurse))"
  S = S & N & "            res.Add((FrameworkElement)el);"
  S = S & N & "        return res;"
  S = S & N & "    }"
  S = S & N & "    public static IEnumerable<Visual> GetChildren(this Visual parent, bool recurse = true)"
  S = S & N & "    {"
  S = S & N & "        if (parent != null)"
  S = S & N & "        {"
  S = S & N & "            int count = VisualTreeHelper.GetChildrenCount(parent);"
  S = S & N & "            for (int i = 0; i < count; i++)"
  S = S & N & "            {"
  S = S & N & "                // Retrieve child visual at specified index value."
  S = S & N & "                var child = VisualTreeHelper.GetChild(parent, i) as Visual;"
  S = S & N & ""
  S = S & N & "                if (child != null)"
  S = S & N & "                {"
  S = S & N & "                    yield return child;"
  S = S & N & ""
  S = S & N & "                    if (recurse)"
  S = S & N & "                    {"
  S = S & N & "                        foreach (var grandChild in child.GetChildren(true))"
  S = S & N & "                        {"
  S = S & N & "                            yield return grandChild;"
  S = S & N & "                        }"
  S = S & N & "                    }"
  S = S & N & "                }"
  S = S & N & "            }"
  S = S & N & "        }"
  S = S & N & "    }"
  S = S & N & ""
  S = S & N & "    public class KeyedTreeViewItem"
  S = S & N & "    {"
  S = S & N & "        public ObservableCollection<KeyedTreeViewItem> Items { get; set; }"
  S = S & N & "        public string Key;"
  S = S & N & "        public string Name;"
  S = S & N & "        public KeyedTreeViewItem Parent;"
  S = S & N & "        private void setup(KeyedTreeViewItem parent, string vKey, string vName)"
  S = S & N & "        {"
  S = S & N & "            Parent = parent;"
  S = S & N & "            Items = new ObservableCollection<KeyedTreeViewItem>();"
  S = S & N & "            Key = vKey;"
  S = S & N & "            Name = vName;"
  S = S & N & "        }"
  S = S & N & ""
  S = S & N & "        public KeyedTreeViewItem(string vKey, string vName) : base()"
  S = S & N & "        { setup(null, vKey, vName); }"
  S = S & N & ""
  S = S & N & "        private KeyedTreeViewItem(KeyedTreeViewItem parent, string vKey, string vName) : base()"
  S = S & N & "        { setup(parent, vKey, vName); }"
  S = S & N & ""
  S = S & N & "        public void Add(string vKey, string vName)"
  S = S & N & "        { Items.Add(new KeyedTreeViewItem(this, vKey, vName)); }"
  S = S & N & ""
  S = S & N & "        public new string ToString() { return Name; }"
  S = S & N & "    }"
  S = S & N & "    public static KeyedTreeViewItem SelectedItemKeyed(this TreeView T)"
  S = S & N & "    { return (KeyedTreeViewItem)T.SelectedItem; }"
  S = S & N & ""
  S = S & N & "    public static KeyedTreeViewItem getItemByKey(this TreeView T, string key)"
  S = S & N & "    {"
  S = S & N & "        foreach (KeyedTreeViewItem I in T.Items)"
  S = S & N & "            if (I.Key == key) return I;"
  S = S & N & "        return null;"
  S = S & N & "    }"
  S = S & N & ""
  S = S & N & ""
  S = S & N & "    public static T GetVisualChild<T>(Visual parent) where T : Visual"
  S = S & N & "    {"
  S = S & N & "        T child = default(T);"
  S = S & N & "        int numVisuals = VisualTreeHelper.GetChildrenCount(parent);"
  S = S & N & "        for (int i = 0; i < numVisuals; i++)"
  S = S & N & "        {"
  S = S & N & "            Visual v = (Visual)VisualTreeHelper.GetChild(parent, i);"
  S = S & N & "            child = v as T;"
  S = S & N & "            if (child == null) child = GetVisualChild<T>(v);"
  S = S & N & "            if (child != null) break;"
  S = S & N & "        }"
  S = S & N & "        return child;"
  S = S & N & "    }"
  S = S & N & ""
  S = S & N & "    public static DataGridRow GetSelectedRow(this DataGrid grid)"
  S = S & N & "    { return (DataGridRow)grid.ItemContainerGenerator.ContainerFromItem(grid.SelectedItem); }"
  S = S & N & "    public static DataGridRow GetRow(this DataGrid grid, int index)"
  S = S & N & "    {"
  S = S & N & "        DataGridRow row = (DataGridRow)grid.ItemContainerGenerator.ContainerFromIndex(index);"
  S = S & N & "        if (row == null)"
  S = S & N & "        {"
  S = S & N & "            // May be virtualized, bring into view and try again."
  S = S & N & "            grid.UpdateLayout();"
  S = S & N & "            grid.ScrollIntoView(grid.Items[index]);"
  S = S & N & "            row = (DataGridRow)grid.ItemContainerGenerator.ContainerFromIndex(index);"
  S = S & N & "        }"
  S = S & N & "        return row;"
  S = S & N & "    }"
  S = S & N & ""
  S = S & N & "    public static DataGridCell GetCell(this DataGrid grid, DataGridRow row, int column)"
  S = S & N & "    {"
  S = S & N & "        if (row != null)"
  S = S & N & "        {"
  S = S & N & "            DataGridCellsPresenter presenter = GetVisualChild<DataGridCellsPresenter>(row);"
  S = S & N & ""
  S = S & N & "            if (presenter == null)"
  S = S & N & "            {"
  S = S & N & "                grid.ScrollIntoView(row, grid.Columns[column]);"
  S = S & N & "                presenter = GetVisualChild<DataGridCellsPresenter>(row);"
  S = S & N & "            }"
  S = S & N & ""
  S = S & N & "            DataGridCell cell = (DataGridCell)presenter.ItemContainerGenerator.ContainerFromIndex(column);"
  S = S & N & "            return cell;"
  S = S & N & "        }"
  S = S & N & "        return null;"
  S = S & N & "    }"
  S = S & N & ""
  S = S & N & "    public static DataGridCell GetCell(this DataGrid grid, int row, int column)"
  S = S & N & "    {"
  S = S & N & "        DataGridRow rowContainer = grid.GetRow(row);"
  S = S & N & "        return grid.GetCell(rowContainer, column);"
  S = S & N & "    }"
  S = S & N & ""
  S = S & N & "    public class CommandBase : ICommand"
  S = S & N & "    {"
  S = S & N & "        public event EventHandler CanExecuteChanged;"
  S = S & N & ""
  S = S & N & "        private Func<bool> mCanExecute = null;"
  S = S & N & "        private Action<object> mExecute = null;"
  S = S & N & ""
  S = S & N & "        public CommandBase(Action<object> vExecute, Func<bool> fCanExecute = null) { mCanExecute = fCanExecute; mExecute = vExecute; }"
  S = S & N & "        public bool CanExecute(object parameter) { return mCanExecute == null ? true : mCanExecute.Invoke(); }"
  S = S & N & "        public void Execute(object parameter) { mExecute.Invoke(parameter); }"
  S = S & N & "    }"
  S = S & N & "}"
  S = S & N & ""
  VBExtensionClass = S
End Function

Public Function VBAConstantsClass() As String
  Dim S As String, M As String, N As String
  Dim L
  S = ""
  M = ""
  N = vbCrLf
  
  S = S & M & ""
  S = S & M & UsingEverything
  S = S & N
  S = S & M & "public static class VBConstants {"
  S = S & N & "  public const long vbKeyLButton = 1; // Left mouse button"

  S = S & N & "    public const long vbKeyRButton = 2;  // CANCEL mouse button "
  S = S & N & "    public const long vbKeyCancel = 3;  // Middle key  "
  S = S & N & "    public const long vbKeyMButton = 4;  // BACKSPACE mouse button "
  S = S & N & "    public const long vbKeyBack = 8;  // TAB key  "
  S = S & N & "    public const long vbKeyTab = 9;  //  key  "
  S = S & N & "    public const long vbKeyClear = 12;  //  CLEAR key "
  S = S & N & "    public const long vbKeyReturn = 13;  //  ENTER key "
  S = S & N & "    public const long vbKeyShift = 16;  //  SHIFT key "
  S = S & N & "    public const long vbKeyControl = 17;  //  CTRL key "
  S = S & N & "    public const long vbKeyMenu = 18;  //  MENU key "
  S = S & N & "    public const long vbKeyPause = 19;  //  PAUSE key "
  S = S & N & "    public const long vbKeyCapital = 20;  //  CAPS lock key"
  S = S & N & "    public const long vbKeyEscape = 27;  //  ESC key "
  S = S & N & "    public const long vbKeySpace = 32;  //  SPACEBAR key "
  S = S & N & "    public const long vbKeyPageUp = 33;  //  PAGE UP key"
  S = S & N & "    public const long vbKeyPageDown = 34;  //  PAGE DOWN key"
  S = S & N & "    public const long vbKeyEnd = 35;  //  END key "
  S = S & N & "    public const long vbKeyHome = 36;  //  HOME key "
  S = S & N & "    public const long vbKeyLeft = 37;  //  LEFT ARROW key"
  S = S & N & "    public const long vbKeyUp = 38;  //  UP ARROW key"
  S = S & N & "    public const long vbKeyRight = 39;  //  RIGHT ARROW key"
  S = S & N & "    public const long vbKeyDown = 40;  //  DOWN ARROW key"
  S = S & N & "    public const long vbKeySelect = 41;  //  SELECT key "
  S = S & N & "    public const long vbKeyPrint = 42;  //  print SCREEN key"
  S = S & N & "    public const long vbKeyExecute = 43;  //  EXECUTE key "
  S = S & N & "    public const long vbKeySnapshot = 44;  //  SNAPSHOT key "
  S = S & N & "    public const long vbKeyInsert = 45;  //  INS key "
  S = S & N & "    public const long vbKeyDelete = 46;  //  DEL key "
  S = S & N & "    public const long vbKeyHelp = 47;  // NUM HELP key "
  S = S & N & "    public const long vbKeyNumlock = 144;  //  lock key "
  S = S & N & "    public const long vbKeyA = 65;  //  A key "
  S = S & N & "    public const long vbKeyB = 66;  //  B key "
  S = S & N & "    public const long vbKeyC = 67;  //  C key "
  S = S & N & "    public const long vbKeyD = 68;  //  D key "
  S = S & N & "    public const long vbKeyE = 69;  //  E key "
  S = S & N & "    public const long vbKeyF = 70;  //  F key "
  S = S & N & "    public const long vbKeyG = 71;  //  G key "
  S = S & N & "    public const long vbKeyH = 72;  //  H key "
  S = S & N & "    public const long vbKeyI = 73;  //  I key "
  S = S & N & "    public const long vbKeyJ = 74;  //  J key "
  S = S & N & "    public const long vbKeyK = 75;  //  K key "
  S = S & N & "    public const long vbKeyL = 76;  //  L key "
  S = S & N & "    public const long vbKeyM = 77;  //  M key "
  S = S & N & "    public const long vbKeyN = 78;  //  N key "
  S = S & N & "    public const long vbKeyO = 79;  //  O key "
  S = S & N & "    public const long vbKeyP = 80;  //  P key "
  S = S & N & "    public const long vbKeyQ = 81;  //  Q key "
  S = S & N & "    public const long vbKeyR = 82;  //  R key "
  S = S & N & "    public const long vbKeyS = 83;  //  S key "
  S = S & N & "    public const long vbKeyT = 84;  //  T key "
  S = S & N & "    public const long vbKeyU = 85;  //  U key "
  S = S & N & "    public const long vbKeyV = 86;  //  V key "
  S = S & N & "    public const long vbKeyW = 87;  //  W key "
  S = S & N & "    public const long vbKeyX = 88;  //  X key "
  S = S & N & "    public const long vbKeyY = 89;  //  Y key "
  S = S & N & "    public const long vbKeyZ = 90;  //  Z key "
  S = S & N & "    public const long vbKey0 = 48;  //  0 key "
  S = S & N & "    public const long vbKey1 = 49;  //  1 key "
  S = S & N & "    public const long vbKey2 = 50;  //  2 key "
  S = S & N & "    public const long vbKey3 = 51;  //  3 key "
  S = S & N & "    public const long vbKey4 = 52;  //  4 key "
  S = S & N & "    public const long vbKey5 = 53;  //  5 key "
  S = S & N & "    public const long vbKey6 = 54;  //  6 key "
  S = S & N & "    public const long vbKey7 = 55;  //  7 key "
  S = S & N & "    public const long vbKey8 = 56;  //  8 key "
  S = S & N & "    public const long vbKey9 = 57;  //  9 key "
  S = S & N & "    public const long vbKeyNumpad0 = 96;  //  0 key "
  S = S & N & "    public const long vbKeyNumpad1 = 97;  //  1 key "
  S = S & N & "    public const long vbKeyNumpad2 = 98;  //  2 key "
  S = S & N & "    public const long vbKeyNumpad3 = 99;  // 4 3 key "
  S = S & N & "    public const long vbKeyNumpad4 = 100;  // 5 key  "
  S = S & N & "    public const long vbKeyNumpad5 = 101;  // 6 key  "
  S = S & N & "    public const long vbKeyNumpad6 = 102;  // 7 key  "
  S = S & N & "    public const long vbKeyNumpad7 = 103;  // 8 key  "
  S = S & N & "    public const long vbKeyNumpad8 = 104;  // 9 key  "
  S = S & N & "    public const long vbKeyNumpad9 = 105;  // MULTIPLICATION key  "
  S = S & N & "    public const long vbKeyMultiply = 106;  // PLUS SIGN (*) key"
  S = S & N & "    public const long vbKeyAdd = 107;  // ENTER SIGN (+) key"
  S = S & N & "    public const long vbKeySeparator = 108;  // MINUS (keypad) key "
  S = S & N & "    public const long vbKeySubtract = 109;  // DECIMAL SIGN (-) key"
  S = S & N & "    public const long vbKeyDecimal = 110;  // DIVISION POINT(.) key "
  S = S & N & "    public const long vbKeyDivide = 111;  // F1 SIGN (/) key"
  S = S & N & "    public const long vbKeyF1 = 112;  // F2 key  "
  S = S & N & "    public const long vbKeyF2 = 113;  // F3 key  "
  S = S & N & "    public const long vbKeyF3 = 114;  // F4 key  "
  S = S & N & "    public const long vbKeyF4 = 115;  // F5 key  "
  S = S & N & "    public const long vbKeyF5 = 116;  // F6 key  "
  S = S & N & "    public const long vbKeyF6 = 117;  // F7 key  "
  S = S & N & "    public const long vbKeyF7 = 118;  // F8 key  "
  S = S & N & "    public const long vbKeyF8 = 119;  // F9 key  "
  S = S & N & "    public const long vbKeyF9 = 120;  // F10 key  "
  S = S & N & "    public const long vbKeyF10 = 121;  // F11 key  "
  S = S & N & "    public const long vbKeyF11 = 122;  // F12 key  "
  S = S & N & "    public const long vbKeyF12 = 123;  // F13 key  "
  S = S & N & "    public const long vbKeyF13 = 124;  // F14 key  "
  S = S & N & "    public const long vbKeyF14 = 125;  // F15 key  "
  S = S & N & "    public const long vbKeyF15 = 126;  // F16 key  "
  S = S & N & "    public const long vbKeyF16 = 127;  //  key  "
  
  S = S & N & "    public const long vbBlack = 0x0;  // BLACK"
  S = S & N & "    public const long vbBlue = 0x0000FF;  // BLUE"
  S = S & N & "    public const long vbCyan = 0x00FFFF;  // CYAN"
  S = S & N & "    public const long vbGreen = 0x00FF00;  // GREEN"
  S = S & N & "    public const long vbMagenta = 0xFFFF00;  // MAGENTA"
  S = S & N & "    public const long vbRed = 0xFF0000;  // RED"
  S = S & N & "    public const long vbWhite = 0xFFFFFF;  // WHITE"
  S = S & N & "    public const long vbYellow = 0xFF00FF;  // YELLOW"
  
  S = S & N & "    public const long vbModal = 0x1;"
  
  S = S & N & "    public enum AlignConstants {  vbAlignNone = 0, vbAlignTop = 1, vbAlignBottom = 2, vbAlignLeft = 3, vbAlignRight = 4 }"
  
  S = S & N & " }"
  
  VBAConstantsClass = S
End Function

